import os
import cv2
import numpy as np

# 将相近颜色转换成某类
# 颜色映射表 (BGR 格式)
color_map = {
    (0, 0, 0): 0,        # 黑色 -> 0 类 背景
    (0, 255, 255): 1,    # 青色 -> 1 类 水
    (0, 0, 255): 2,      # 蓝色 -> 2 类 路
    (255, 0, 0): 3,      # 红色 -> 3 类 建筑
    (0, 255, 0): 4       # 绿色 -> 4 类 植被
}

# 初始化类别统计字典
category_counts = {label: 0 for label in color_map.values()}

def find_closest_color(bgr):
    """
    找到与当前 BGR 颜色最接近的已定义颜色
    """
    b, g, r = bgr
    min_dist = float("inf")
    best_match = None

    for (cb, cg, cr), label in color_map.items():
        dist = (b - cb) ** 2 + (g - cg) ** 2 + (r - cr) ** 2  # 计算欧式距离平方
        if dist < min_dist:
            min_dist = dist
            best_match = label

    return best_match

def rgb_to_single_channel(image):
    """
    将 RGB 图像转换为单通道类别图，并统计每个类别的像素数
    """
    global category_counts

    h, w = image.shape[:2]
    class_map = np.full((h, w), 255, dtype=np.uint8)  # 先默认全部是 255

    unique_colors = np.unique(image.reshape(-1, 3), axis=0)  # 获取图像中的所有颜色
    color_to_label = {}

    for color in unique_colors:
        bgr_tuple = tuple(color)
        if bgr_tuple in color_map:
            label = color_map[bgr_tuple]  # 直接映射
        else:
            label = find_closest_color(bgr_tuple)  # 找最相近的颜色
        color_to_label[bgr_tuple] = label

    # 遍历每个像素点，赋予类别值
    for bgr_tuple, label in color_to_label.items():
        mask = (image[:, :, 0] == bgr_tuple[0]) & (image[:, :, 1] == bgr_tuple[1]) & (image[:, :, 2] == bgr_tuple[2])
        class_map[mask] = label
        category_counts[label] += np.sum(mask)  # 统计像素数

    return class_map

def process_images(input_folder, output_folder):
    """
    批量处理文件夹中的图片
    """
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for filename in os.listdir(input_folder):
        if filename.endswith(('.png', '.jpg', '.jpeg', '.tif')):
            img_path = os.path.join(input_folder, filename)
            img = cv2.imread(img_path)

            if img is None:
                print(f"跳过无法读取的文件: {filename}")
                continue

            class_map = rgb_to_single_channel(img)

            # 保存为单通道 PNG
            output_path = os.path.join(output_folder, filename)
            cv2.imwrite(output_path, class_map)
            print(f"处理完成: {filename}")

    # 输出类别统计信息
    print("\n=== 类别统计结果 ===")
    for label, count in category_counts.items():
        print(f"类别 {label}: {count} 像素")

# 使用示例
input_folder = r"C:\Users\ruyuz\Desktop\EAGLE-main\src_EAGLE\pytorch_data_dir\FUSAR\labelcolor"  # 输入文件夹
output_folder = r"C:\Users\ruyuz\Desktop\EAGLE-main\src_EAGLE\pytorch_data_dir\FUSAR\labels"  # 输出文件夹
process_images(input_folder, output_folder)
